# Copyright 2018 CESNET
#
# This file is part of Fdistdump.
#
# Fdistdump is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Fdistdump is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Fdistdump.  If not, see <http://www.gnu.org/licenses/>.


##### CPack variables
set(CPACK_PACKAGE_VENDOR "CESNET")
set(CPACK_PACKAGE_CONTACT "wrona@cesnet.cz")

string_capitalize("${PROJECT_DESCRIPTION}" CPACK_PACKAGE_DESCRIPTION_SUMMARY)
set(CPACK_PACKAGE_DESCRIPTION "${PROJECT_DESCRIPTION_LONG}")

set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})
set(CPACK_PACKAGE_CHECKSUM SHA256)

set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/COPYING")

set(CPACK_GENERATOR "TGZ" "TXZ")
set(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}-${PROJECT_VERSION}-${CMAKE_SYSTEM}")

set(CPACK_SOURCE_GENERATOR "TGZ" "TXZ")
set(CPACK_SOURCE_PACKAGE_FILE_NAME "${PROJECT_NAME}-${PROJECT_VERSION}-source")
# ignore (don't pack) certaing files
set(CPACK_SOURCE_IGNORE_FILES
    # Git
    "/\\\\.git/"
    "/\\\\.gitignore$"
    # temporary files
    "~$"
    "\\\\.swo$"
    "\\\\.swp$"
    )

##### CMake variables for CPack
# Always use relative path as a DESTINATION, otherwise CMAKE_INSTALL_PREFIX
# won't have any effect.
set(CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION TRUE)

##### Include CPack module once all variables are set.
# This generates CPackConfig.cmake and CPackSourceConfig.cmake files. It also
# generates a new target called "package" in the build system, which invokes
# CPack by specifying the generated configuration files.
include(CPack)

#### RPM
# CPack's RPM generator is not used.
# CPack can generate SPEC files and then run rpmbuild. It can also use SPEC file
# template, use configure_file(), and then run rpmbuild. The SPEC file suitable
# for CPack should look similar to a standard SPEC file without %build and
# %install section ommited (because it uses the CMake's build tree). We are,
# however, using build services like COPR, which require standard independet
# SPEC file with %build and %install sections.
# Create a configuration for CPack

find_program(RPMBUILD_PATH rpmbuild)
if(RPMBUILD_PATH STREQUAL "RPMBUILD_PATH-NOTFOUND")
    message(WARNING "rpmbuild executable not found, RPM/SRPM packages creation "
            "build rules will not be added to the generated build system")
else()
    message(STATUS "rpmbuild executable found, adding RPM/SRPM packages "
            "creation build rules to the generated build system")

    # define an RPM build directory (aka %{_topdir})
    set(RPM_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/rpmbuild")
    set(RPM_SOURCE_PACKAGE_SUFFIX ".tar.xz")

    # setup an RPM building environment in the RPM build directory
    file(MAKE_DIRECTORY "${RPM_BUILD_DIR}/BUILD" "${RPM_BUILD_DIR}/RPMS"
                        "${RPM_BUILD_DIR}/SOURCES" "${RPM_BUILD_DIR}/SPECS"
                        "${RPM_BUILD_DIR}/SRPMS")

    # set SPEC file paths, release, and configure the in file
    set(SPEC_FILE_IN "${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}.spec.in")
    set(SPEC_FILE_OUT "${RPM_BUILD_DIR}/SPECS/${PROJECT_NAME}.spec")
    set(CPACK_RPM_PACKAGE_RELEASE 1)
    configure_file("${SPEC_FILE_IN}" "${SPEC_FILE_OUT}" @ONLY)

    # add an RPM/SRPM packages creation build rule to the generated build system
    add_custom_target(package_rpm VERBATIM
        COMMENT "Build RPM/SRPM packages"

        # DEPENDS doesn't work for targets generated by CMake like package_source
        COMMAND "${CMAKE_COMMAND}" --build "${CMAKE_BINARY_DIR}"
                                   --target "package_source"

        # copy the source package into the RPM SOURCES directory
        COMMAND "${CMAKE_COMMAND}" "-E" "copy"
                                   "${CMAKE_BINARY_DIR}/${CPACK_SOURCE_PACKAGE_FILE_NAME}${RPM_SOURCE_PACKAGE_SUFFIX}"
                                   "${RPM_BUILD_DIR}/SOURCES/"
        # call the RPM builder, do not execute %clean
        COMMAND "${RPMBUILD_PATH}" --define "_topdir ${RPM_BUILD_DIR}"
                                   -ba --noclean ${SPEC_FILE_OUT}
        # do a list check
        COMMAND "${RPMBUILD_PATH}" --define "_topdir ${RPM_BUILD_DIR}"
                                   -bl ${SPEC_FILE_OUT}
        )

    # add an SRPM package creation build rule to the generated build system
    add_custom_target(package_srpm VERBATIM
        COMMENT "Build an SRPM package"

        # DEPENDS doesn't work for targets generated by CMake like package_source
        COMMAND "${CMAKE_COMMAND}" --build "${CMAKE_BINARY_DIR}"
                                   --target "package_source"

        # copy the source package into the RPM SOURCES directory
        COMMAND "${CMAKE_COMMAND}" "-E" "copy"
                                   "${CMAKE_BINARY_DIR}/${CPACK_SOURCE_PACKAGE_FILE_NAME}${RPM_SOURCE_PACKAGE_SUFFIX}"
                                   "${RPM_BUILD_DIR}/SOURCES/"
        # call the RPM builder
        COMMAND "${RPMBUILD_PATH}" --define "_topdir ${RPM_BUILD_DIR}"
                                   -bs ${SPEC_FILE_OUT}
        )
endif(RPMBUILD_PATH STREQUAL "RPMBUILD_PATH-NOTFOUND")
