.\" Man page for fdistdump
.\" Author: Jan Wrona, <wrona@cesnet.cz>
.TH FDISTDUMP 1 "2018-02-20" "0.3.1" "fdistdump manual"


.\" NAME section ---------------------------------------------------------------
.SH NAME
fdistdump \- a tool to query IP flow records on a distributed system


.\" SYNOPSIS section -----------------------------------------------------------
.SH SYNOPSIS
.\" SPMD mode
.B mpiexec
.RI [ MPI_options ]
.B fdistdump
.RI [ options ]
.IR path \ ...
.\" MPMD mode
.br
.B mpiexec
.RI [ global_MPI_options ]
.RI [ local_MPI_options ]
.B fdistdump
.RI [ options ]
.R :
.RI [ local_MPI_options ]
.B fdistdump
.RI [ options ]
.IR path1 \ ...
.R :
.RI [ local_MPI_options ]
.B fdistdump
.RI [ options ]
.IR path2 \ ...
.R :
.R \ ...


.\" DESCRIPTION section --------------------------------------------------------
.SH DESCRIPTION
\fBfdistdump\fR is a fast, scalable, distributed tool to query Internet Protocol flow record files.
The master/slave communication model allows it to run jobs on unlimited number of nodes, including a single local node.
Message Passing Interface (MPI) is used as an underlying communication protocol.
Its basic features include listing, filtering, sorting, and aggregating records.
\fBfdistdump\fR also implements an algorithm to quickly answer Top-N queries (e.g., find the N objects with the highest aggregate values) on a distributed system.


.\" INVOCATION section ------------------------------------------------------------
.SH INVOCATION
\fBfdistdump\fR is an MPI application and it is necessary to launch it using one of \fBmpiexec\fR, \fBmpirun\fR, \fBorterun\fR, or however your MPI implementation calls the process manager.

.\" SPMD vs MPMD subsection ---------------------
.SS Launch Modes
Both MPI program launch modes are supported: single program, multiple data (SPMD) and multiple programs, multiple data (MPMD).
.TP
.B SPMD
The SPMD mode is demonstrated by the first line in the \fBSYNOPSIS\fR section above.
In the this mode, all \fIoptions\fR and \fIpath\fRs are identical for each \fBfdistdump\fR process.
Every specified \fIpath\fR will be processed separately by each slave, therefore each \fIpath\fR should be accessible from every node where the slave process is invoked.
Typical use case for this mode is when the slaves use a local storage for flow files, because each slave stores different set of flow files on the same path.
If this mode would be used with a shared storage, multiple slaves would process the same set of flow files, which is usually not what you want.
.PP
.nf
.RS
$ mpiexec -host MasterNode,SlaveNode1,SlaveNode2 fdistdump \fI/local/flow/storage\fR
.RE
.fi

.TP
.B MPMD
The MPMD mode is invoked using the colon notation and is demonstrated by the second line in the \fBSYNOPSIS\fR section above.
It allows to set different \fIlocal_MPI_options\fR and \fIpath\fRs for each \fBfdistdump\fR process.
All \fIoptions\fR should be identical for each \fBfdistdump\fR process, otherwise the behavior is undefined.
Typical use case for this mode is when the slaves use a shared storage for flow files, because each slave can be assigned with a different set of flow files.
.PP
.nf
.RS
$ mpiexec -host MasterNode,SlaveNode1,SlaveNode2      # \fIglobal_MPI_options\fR
          -n 1 fdistdump :                            # master process launched on MasterNode, master does not read any flow files
          -n 1 fdistdump \fI/shared/flow/storage/dir1\fR :  # slave process launched on SlaveNode1
          -n 1 fdistdump \fI/shared/flow/storage/dir2\fR    # slave process launched on SlaveNode2
.RE
.fi

.\" MPI_options subsection ---------------------
.SS MPI_options
Only the basic \fIMPI_options\fR are mentioned here, for a complete list see the process manager documentation.

.TP
.BI -n \ number
Use this option to run \fBfdistdump\fR on a \fBsingle local node\fR.
\fInumber\fR specifies a number of processes to launch.
The first process will always be the master, remaining processes will be the slaves.
It is mandatory to have exactly one master and at least one slave process.
Therefore, \fInumber\fR has to be at least 2, otherwise the job won't start.
The following command will run two \fBfdistdump\fR processes on a local node, one master and one slave.
Without any additional \fBfdistdump\fR options, all records in \fIpath\fR will be printed to the stdout:
.PP
.nf
.RS
$ mpiexec -n 2 fdistdump \fIpath\fR
.RE
.fi

.TP
.BI -host \ host\fR[,...]
Use this option to run \fBfdistdump\fR on \fBmultiple nodes\fR (hosts).
By the \fB-host\fR option you can specify those nodes from the command-line using a comma separated list.
The following command will run three \fBfdistdump\fR processes: the master on node1, one slave on node2, and another slave on node3.
Without any additional \fBfdistdump\fR options, all records in \fIpath\fR on node2 and node3 (i.e., where slave processes are running) will be printed to the stdout:
.PP
.nf
.RS
$ mpiexec -host node1,node2,node3 fdistdump \fIpath\fR
.RE
.fi


.\" OPTIONS section ------------------------------------------------------------
.SH OPTIONS
Non argument options that are duplicated on the command line are not harmful.
For options that require an argument, each duplication will override the previous argument value.
A short option may take a parameter of the form \fB-a\fI param\fR, a long option may take a parameter of the form \fB--arg=\fIparam\fR or \fB--arg\fI param\fR.
Long option names may be abbreviated if the abbreviation is unique or is an exact match for some defined option.
Mandatory arguments to long options are mandatory for short options too.

.\" Path option subsection ---------------------
.SS Path
Each given \fIpath\fR argument is either a file name or a directory.
In SPMD mode, all \fIpath\fRs will be processed by all slave processes and therefore should be accessible from every node where the slave process is invoked.
Otherwise, a warning message will be printed to the stderr by the affected process and the inaccessible \fIpath\fR will be ignored.
If \fIpath\fR is a file name, it will be processed directly.
If it is a directory, all files in that directory will be processed and all subdirectories will be recursively processed in the same way.

The \fIpath\fR is a character string composed of zero or more directives: ordinary characters (not %), which are copied unchanged to the output path, and conversion specifications, each of which results in some additional action.
Each conversion specification is introduced by the character % followed by a conversion specifier character.
If path begins with "%DIGITS:", then \fIpath\fR is targeted only for one specific slave, the one where DIGITS are equal to the MPI rank of that slave.

Conversion specifiers:
.TP
.B h
The conversion specifier is converted into the hostname of the node.
This may be used to read different files by each slave from a shared storage.

.\" General options subsection ---------------------
.SS General Options
.TP
.BR -a , \ --aggregation=\fIfield\fR[,...]
Aggregate flow records together by any number of \fIfield\fRs.
Option argument is comma separated list of \fIfield\fRs, at least one \fIfield\fR is mandatory.
For more information about valid \fIfield\fR strings see the \fBFIELDS\fR section.

.TP
.BR -f , \ --filter=\fIfilter
Process only
.I filter
matching records.
A
.I filter
can be specified as a text string, the syntax and semantics of the string are as described by
.BR nfdump (1) .
A
.I filter
string is compiled by
.BR libnf ,
which currently uses
.B nfdump
filtering engine by default. This will change in future versions and
.B libnf
will use its own filtering engine.

.TP
.BR -l , \ --limit=\fIlimit
Limit the number of records to print. Option argument is a natural number, special value 0 disables the limit.

Keep in mind that with enabled aggregation, this doesn't reduce the number of processed records.
During the aggregation, all filter matching records have to be processed for the sake of result correctness.
On the other hand, without aggregation, this may vastly reduce the number of processed records and therefore reduce the query running time.

.TP
.BR -o , \ --order=\fIfield\fR[#\fIdirection\fR]
Set record sort order.
Sort key is specified by \fIfield\fR.
Sort \fIdirection\fR is either \fBasc\fR or \fBdesc\fR string, which are abbreviations for ascending and descending direction, respectively.
For more information about valid \fIfield\fR strings see the \fBFIELDS\fR section.

.TP
.BR -s , \ --statistic=\fIstatistic
Shortcut for aggregation (\fB-a\fR), sort (\fB-o\fR) and record limit (\fB-l\fR).
Option argument string \fIstatistic \fRis composed of a \fB-a \fRargument and an optional # symbol followed by a \fB-o \fRargument.
Formally written
.IR statistic \ is\  aggregation_key_field [,...][# sort_field [# sort_direction ]].

If
.I sort_field
is not present,
.B flows
is the default sort key.
Default record limit is
.B 10
and may by changed by an explicit
.B -l
option.

.TP
.BR -t , \ --time-point=\fItime_spec
Process only a single flow file on each slave, the one which includes given \fItime_spec\fR.

Time based options (\fB-t\fR and \fB-T\fR) are useful only if paths to your flow files contain some information about stored flows timestamps.
Flow file usually contains flow records received during some time window, e.g., 5 minute period.
If \fIpath\fR to your flow files carry information about the beginning of this period, you can use these options to easily create queries, where only flow files from certain time will be processed.

The following directory hierarchy is required:
.IR profile_name / YYYY / MM / DD / hh /lnf. YYYYMMDDhhmm .
For example for profile \fBlive\fR and flows received at 2015-21-10 from 7:25 to 7:30, path will be \fBlive/2015/10/21/10/lnf.20151020725\fR.
Therefore, time based options affects only directory \fIpath\fRs.

\fItime_spec\fR string should contain one or more white-space separated time specifiers.
Time specifier is a representation of a date or a time.
Supported date formats are ISO (YYYY-MM-DD), European (DD.MM.YYYY), and American (MM/DD/YYYY).
Supported time formats are hh:mm and Unix time (number of seconds that have elapsed since 00:00:00 UTC).
Certain special values are also supported: the name of the day of the week or the month name, both according to the current locale, in abbreviated form or the full name.

If no date is given, today is assumed if the given hour is lesser than the current hour and yesterday is assumed if it is more.
If no time is given, midnight is assumed.
If only the weekday is given, this week is assumed if the given day is less or equal to the current day and last week if it is more.
If only the month is given, the current year is assumed if the given month is less or equal to the current month and last year if it is more and no year is given.

All the time specifiers should be entered in local time (see \fB--time-zone\fR).
They are internally converted to UTC, because the directory hierarchy names are in UTC.

.TP
.BR -T , \ --time-range=\fIbegin\fR[#\fIend\fR]
Process only flow files from \fIbegin\fR to the \fIend\fR time range.
Both \fIbegin\fR and \fIend\fR are \fItime_spec\fR strings.
If \fIend\fR is not provided, current time is assumed as range end.
All other aspects that was mentioned for the time point option (\fB-t\fR) apply also for this option.

If given \fIbegin\fR and \fIend\fR times are not aligned to the flow file rotation intervals (which is usually 5 minutes), alignment is automatically performed.
Beginning time is aligned to the beginning of the rotation interval, ending time is aligned to the ending of the rotation interval:

.nf
.RS
0     5    10    15    20   -------->   0     5    10    15    20
|_____|_____|_____|_____|   alignment   |_____|_____|_____|_____|
         ^     ^                              ^           ^
       begin  end                           begin        end
.RE
.fi

.TP
.BR -v , \ --verbosity=\fIlevel
Set verbosity level to \fIlevel\fR.
The higher the number, the more information is printed.
Level 0 shows no messages (quite mode), level 1 shows errors, level 2 shows warnings, level 3 shows info messages and level 4 shows debug messages.
All messages of this kind are printed to the \fBstderr\fR stream.
Default level is 2, i.e. show errors and warnings.

.\" Controlling the output subsection ---------------------
.SS Controlling the Output
.TP
.BI --output-fields= field \fR[,...]
Set the list of output fields.
Option argument is comma separated list of \fIfield\fRs.
Sort key (\fB-s\fR) and all aggregation keys (\fB-a\fR) are added implicitly.
If the argument is missing, default output fields are used (see the \fBFIELDS\fR section).
If the option argument is empty, no additional output fields are used (only the implicit fields).

Without aggregation, default output fields are
.BR first ,\  packets ,\  bytes ,\  srcip ,\  dstip ,\  srcport ,\  dstport ,\  proto ,\ and\  flags .
.br
With aggregation enabled, default output fields are
.BR duration ,\  flows ,\  packets ,\  bytes ,\  flags ,\  bps ,\  pps ,\ and\  bpp .

.TP
.BI --output-items= item_list
Set output items.
\fIitem_list\fR is comma-separated list of the output items.
Output items are \fBrecords\fR (\fBr\fR), \fBprocessed-records-summary\fR (\fBp\fR) and \fBmetadata-summary\fR (\fBm\fR), you can use a full names or the abbreviated forms.
\fBrecords\fR means result of the query, \fBprocessed-records-summary\fR is the summary of the records that were processed during the query (i.e. \fIfilter\fR matching records).
At the beginning of each flow file, there is a header containing sums of the \fBflows\fR, \fBpackets\fR and \fBbytes\fR fields of all the records in that file.
Those sums are further divided according to the transport protocols TCP, UDP, ICMP.
\fBmetadata-summary\fR output item will read and print those metadata counters.
Using \fBmetadata-summary\fR as a single output item is very fast and efficient.

Default value of \fIitem_list\fR for pretty output is \fBrecords,processed-records-summary\fR, for CSV it contains only \fBrecords\fR.

.TP
.BI --output-format= format
Set output (print) format.
\fIformat\fR is either \fBpretty\fR or \fBcsv\fR.
\fBpretty\fR will create nice human readable output with fields formatted into columns.
It is the default option.
Data conversions are all set to the most human readable form (timestamps converted into broken-down time strings, TCP flags converted into string, ...).
\fBcsv\fR will create machine readable output suitable for post-processing.
It is a standard comma separated values format with all data conversions set to the most machine readable form (timestamps printed as integers, TCP flags printed as a integers, ...).

.TP
.BI --output-ts-conv= timestamp_conversion
Set timestamp output conversion format.
\fItimestamp_conversion\fR is either \fBnone\fR or \fBpretty\fR.
With \fBnone\fR conversion, raw timestamp integer is printed.
The timestamp is a number of milliseconds that have elapsed since 1.1.1970 UTC.
In other words, it is composed of Unix time (number of seconds that have elapsed since 1.1.1970 UTC) and additional milliseconds elapsed since the last full second.
For example 1445405280123 means 21.10.2015 7:28, 123 ms.

With \fBpretty\fR conversion, "YYYY-MM-DD hh:mm:ss.ms" format expressed relative to the user's specified time zone is used.

.TP
.BI --output-volume-conv= volume_conversion
Set volume output conversion format.
Volume fields are
.BR bytes ,\  packets ,\  outbytes ,\  outpackets ,\  flows ,\  bsp ,\  pps \ and\  bpp .
This conversion is also applied to the summary.

.I volume_conversion
is one of
.BR none ,\  metric-prefix \ or\  binary-prefix .
.B none
conversion will print raw integer or double.
Following will prepend standard unit prefix to indicate multiples of the unit.
The prefixes of the metric system such as kilo and mega, represent multiplication by powers of ten.
In information technology it is common to use binary prefixes such as kibi and mebi, which are based on powers of two.
For example 150000 will be converted to 150.0 k using
.B metric-prefix
and to 146.4 Ki using
.BR binary-prefix .

.TP
.BI --output-tcpflags-conv= TCP_flags_conversion
Set TCP flags output conversion format.
.I TCP_flags_conversion
is either
.BR none \ or\  str .
TCP flags are composed of 8 bits: CWR, ECE, URG, ACK, PSH, RST, SYN and FIN.

Using
.B none
conversion, raw integer is printed.
Using
.B str
conversion, flags are converted into human readable string composing of 8 characters.
Each character represents one bit, order is preserved (CWR is first, FIN is last).
If bit is set, character is set to the first letter of bit's name.
If bit is unset, character is set to the dot symbol.
For example C.UA..SF means that CWR, URG, ACK, SYN and FIN bits are set, others are unset.

.TP
.BI --output-addr-conv= IP_address_conversion
Set IP address output conversion format.
.I IP_address_conversion
is either
.BR none \ or\  str .
IP address is either IPv4 or IPv6 address.

With
.B none
conversion, IP address is converted to UINT[0]:UINT[1]:UINT[2]:UINT[3].
If IPv4 is present, first three UINTs are zero.
With
.B str
conversion,
.BR inet_ntop ()
function is used to convert binary representation to string.

.TP
.BI --output-proto-conv= IP_protocol_conversion
Set IP protocol output conversion format.
IP protocol is one octet long field in the IP header which defines the protocol used in the data portion of the IP datagram (usually TCP or UDP).
The Internet Assigned Numbers Authority maintains a list of IP protocol numbers.

.I IP_protocol_conversion
is either
.BR none \ or\  str .
Using
.B none
conversion will print raw integer. Using
.B str
conversion will print IP protocol name, as defined by IANA.

.TP
.BI --output-duration-conv= duration_conversion
Set
.B duration
conversion format.
.B duration
is field calculated by
.BR end \ -\  start .
.I duration_conversion
is either
.BR none \ or\  str .
Using
.BR none ,
raw integer is printed. Using
.BR str ,
duration is converted into hh:mm:ss.ms string.

.\" Progress bar options subsection ---------------------
.SS Progress Bar Options
.TP
.BI --progress-bar-type= progress_bar_type
Set progress bar type.
Progress is calculated with resolution of one file.
This may be inaccurate if records are unevenly spread among files.

\fIprogress_bar_type\fR is one of
.BR none ,\  total ,\  perslave \ or\  json.
\fBnone\fR will disable progress bar, \fBtotal\fR will print only total progress (enabled by default), \fBperslave\fR will print per slave progress together with total progress, \fBjson\fR will print per slave progress formatted as a JSON.

.TP
.BI --progress-bar-dest= progress_bar_destination
Set progress bar destination.
There are two special values: stdout and stderr (which is also default).
Every other value will be treated as a file name and \fBfdistdump\fR will continually rewrite this file with the current progress.

.\" Other options subsection ---------------------
.SS Other Options
.TP
.B --no-tput
Disable the TPUT algorithm for Top-N queries.

TPUT is an algorithm to quickly answer Top-N queries (e.g., find the N objects with the highest aggregate values) in a distributed network.
It should not affect the results in any way, but it should reduce amount of data transferred between the master and the slave(s).
It supports both descending and ascending order directions.
\fBfdistdump\fR's implementation uses a modified TPUT algorithm presented in "Efficient Top-K Query Calculation in Distributed Networks" by Pei Cao and Zhe Wang.

However, there are three conditions that have to be satisfied, otherwise it will be automatically disabled:

1. aggregation is enabled (\fB-a\fR),

2. record limit is enabled (\fB-l\fR),

3. sorting is enabled (\fB-o\fR) and the sort key is one of traffic volume fields

.RB ( bytes ,\  packets ,\  outbytes ,\  outpackets ,\ or\  flows ).
If TPUT is disabled, a naive method is used.
Naive method for answering Top-N queries requires to send data about all records to the master.
Since the number of records can be high, it could be expensive to a) transfer all there records, and b) aggregate and sort them on the master node.

.TP
.B --no-bfindex
Disable Bloom filter indexes.
A Bloom filter is a space-efficient probabilistic data structure that is used to test whether an element is a member of a set.
False positive matches are possible, but false negatives are not -- in other words, a query returns either "possibly in set" or "definitely not in set".
In this case, the set is a set of source and destination IP addresses in all records in the flow file and we want to know whether certain IP address is contained in the file or not.
Bloom filter is only used in conjunction with a record filter containing one or more IP addresses.

If enabled, together witch each flow file also index file is read.
If the flow file name has the standard prefix "lnf.", the index file name is constructed by substituting this prefix with "bfi.".
Otherwise, the index file name is constructed by prefixing the flow file name with "bfi.".
This feature uses the following Bloom filter index library: https://github.com/CESNET/bloom-filter-index.

.TP
.BI --num-threads \ number
Specifies the number of threads to use in slave's parallel regions.
The value of this options argument shall be a positive integer.
If not defined, the value of the OMP_NUM_THREADS environment variable is used.
If OMP_NUM_THREADS is undefined, the number of used threads is OpenMP implementation defined, but usually all available cores are used.
Master always uses two threads.

.TP
.BI --time-zone \ time_zone_format
Set time zone to initialize time conversion information for all time-related functionality.
Time zone affects both time based options (\fB-t\fR and \fB-T\fR) and the \fBpretty\fR timestamp output conversion format.

If the \fI--time-zone\fR option does appear, its option argument is empty or cannot be interpreted using any of the formats specified in \fItzset\fR (3), then Coordinated Universal Time (UTC) is used.
If \fItime_zone_format\fR has a special value \fBsystem\fR, the master's system time zone is used.
Otherwise, user-specified time zone is used.

.\" Getting help subsection ---------------------
.SS Getting Help
.TP
.B --help
Print a help message and exit.

.TP
.B --version
Display version information and exit.


.\" FIELDS section -------------------------------------------------------------
.SH FIELDS
Valid text representation of a single libnf field is \fIfield\fR[/\fIalignment\fR[/\fIIPv6 alignment\fR]], e.g., srcip or srcip/24, or srcip/24/64.
Alignment is accepted for every field, but are only used when the field is an aggregation key.
Moreover, only IP addresses and timestamps are currently affected.
Alignment in conjunction with IP addresses works as a netmask.
In conjunction with timestamps (e.g., \fBfirst\fR or \fBlast\fR), the greater the alignment value is, the less precise the timestamp is.
If slashes are not part of the string, no alignment is used.
If slashes are part of the string but alignment is not, the behavior is undefined.

Set of supported \fBfield\fRs depends on the installed version of \fBlibnf\fR library.
To discover currently supported fields, \fBlibnf\fR comes with \fBlibnf-info\fR executable, which prints out list of currently supported fields and their meaning.
Keep in mind that the more fields are present, the more data have to processed, transferred from slaves to master, etc.

With \fBnfdump\fR file format it is not possible to determine whether the field is present in the flow record or not.
If the desired field is not present, it will be printed as a zero (or what the specified output conversion creates from the zero).

.\" EXIT STATUS section --------------------------------------------------------
.SH EXIT STATUS
Exit status value depends on your MPI process manager
.RB ( mpiexec ,\  mpirun ,\  orterun ,\ ...),
but it usually returns 0 if all processes return 0.
For behavior in situations, where one or more processes return non-zero value, see you process manager documentation.

.B fdistdump
processes return 0 on success, 1 on error.


.\" ENVIRONMENT section --------------------------------------------------------
.\".SH ENVIRONMENT


.\" FILES section --------------------------------------------------------------
\fBfdistdump\fR does not use any configuration files.


.\" NOTES section --------------------------------------------------------------
.SH NOTES
With disabled sorting and more than one input flow file, output record order is undefined.
This is because of a race condition during concurrent file processing.
It also isn't guaranteed that with the record limit (\fB-l\fR), first records will be printed from the first \fIpath\fR.
It probably won't.
If you need defined record order, use sorting (\fB-o\fR).


.\" BUGS section --------------------------------------------------------------
.\".SH BUGS


.\" EXAMPLE section ------------------------------------------------------------
.SH EXAMPLE

.\" List records subsection ---------------------
.SS List Records
Launch two \fBfdistdump\fR processes on local node, one master and one slave.
Slave process will read both specified flow files concurrently and print all records in both files.
.nf
\&  \fB$ mpiexec -n 2 fdistdump /netflow/flow_file1 /netflow/flow_file2\fR
\&  first                       bytes     packets     srcport     dstport     srcip              dstip             proto
\&  2015-01-19 22:59:17.387     841       5        57942       80          192.245.102.46     54.210.89.244     TCP
\&  2015-01-19 22:59:27.094     41        1        61746       5631        48.91.65.181       78.132.4.32       TCP
\&  2015-01-19 22:59:27.675     104       2        55865       13242       100.4.71.246       192.245.161.140   TCP
\&  <output omitted>

\&  processed records summary:
\&          20 flows, 54 packets, 5.9 k bytes
\&          0.009140 seconds, 2.2 k flows/second
.fi

Launch two \fBfdistdump\fR processes, one master and one slave.
Slave process will recursively read all files within specified directory.
With enabled record limit, only 100 records will be printed.
But as you can see, summary shows 129000 flows processed records.
This is not incorrect, 129000 records were actually processed and only the first 100 were printed.
.nf
\&  \fB$ mpiexec -n 2 fdistdump -l 100 flow_dir/\fR
\&  first                       bytes      packets     srcport     dstport     srcip              dstip            proto
\&  2015-01-20 07:08:58.186     27.1 k     29       28974       1115        172.173.129.10     99.28.15.205     TCP
\&  2015-01-20 07:09:22.010     346        2        51413       23705       20.107.222.24      172.173.14.68    UDP
\&  2015-01-20 07:08:58.058     54.3 k     58       14627       1115        172.173.129.10     99.28.15.205     TCP
\&  <output omitted>

\&  processed records summary:
\&          129.0 k flows, 3.2 M packets, 3.3 G bytes
\&          0.037444 seconds, 3.4 M flows/second
.fi

Launch three \fBfdistdump\fR processes, master on node1 and slaves on node2 and node3.
Each slave process will read specified file and directory (recursively).
Filter is specified, so only records matching the filter will be processed.
\fB--fields\fR option arguments specify to print only IP addresses and ports.
.nf
\&  \fB$ mpiexec -host node1,node2,node3 fdistdump -f "net 147.229.0.0/16" --fields=srcip,dstip,srcport,dstport flow_dir/ flow_file\fR
\&  srcport     dstport     srcip            dstip
\&  80          50646       147.229.65.183   166.202.83.16
\&  44543       23          147.229.222.104  166.206.150.135
\&  22          60034       172.20.250.182   147.229.79.171
\&  <output omitted>

\&  processed records summary:
\&          2.9 k flows, 52.1 k packets, 20.7 M bytes
\&          0.072878 seconds, 39.7 k flows/second
.fi

Launch job according to hostfile hf.txt.
Despite the record limit, each slave has to process all the records in all files inside specified directory.
This is because record sorting is enabled.
Sort key is \fBbytes\fR, which has implicit descending sort direction.
Record limit is 5, therefore 5 records with largest \fBbytes\fR values are printed.
.nf
\&  \fB$ mpiexec --hostfile hf.txt fdistdump -o bytes -l 5 --output-items=records flow_dir/\fR
\&  first                       bytes       packets        srcport     dstport     srcip               dstip               proto
\&  2015-01-20 07:10:02.020     161.7 M     118.3 k     27032       27032       54.98.60.154        192.245.92.125      UDP
\&  2015-01-20 21:40:02.639     111.5 M     78.5 k      80          29835       172.21.3.117        203.136.78.254      TCP
\&  2015-01-20 17:48:50.191     103.6 M     69.1 k      60594       50554       172.173.118.99      192.121.195.133     TCP
\&  2015-01-20 14:06:58.177     41.4 M      32.5 k      0           0           195.166.35.230      166.206.177.218     IPv6
\&  2015-01-19 23:30:02.336     40.9 M      27.3 k      80          4425        172.21.3.117        156.194.181.105     TCP
.fi

.\" Aggregation subsection ---------------------
.SS Aggregation
Following query will process all the records in all the files within specified directory.
Records with the same aggregation key (\fBsrcport\fR in this example) are aggregated (merged) together.
Output record order is undefined.
.nf
\&  \fB$ mpiexec -n 2 fdistdump -a srcport flow_dir/\fR
\&  first                       last                        bytes       packets       flows     srcport     duration         bps         pps       bpp
\&  2015-01-19 22:59:22.597     2015-01-19 23:59:15.862     2.9 M       47.3 k     544       62125       00:59:53.265     6.4 k       13.2      60.0
\&  2015-01-19 22:54:34.369     2015-01-19 23:59:57.297     2.0 G       6.1 M      2.2 M     0           01:05:22.928     4.1 M       1.6 k     325.0
\&  2015-01-19 22:59:16.469     2015-01-19 23:59:13.363     881.3 k     4.8 k      954       50232       00:59:56.894     2.0 k       1.3       181.0
\&  <output omitted>

\&  processed records summary:
\&          76.0 M flows, 971.2 M packets, 745.3 G bytes
\&          0.997696 seconds, 76.2 M flows/second
.fi


Launch three \fBfdistdump\fR processes, one master and two slaves, all on local node.
This configuration doesn't make much sense, because both slaves will process the same files.
Shell pathnames globbing in this case has exactly same effect as path specified in previous example.
Records are aggregated according to two keys, source IP address and protocol.
Result is sorted by number of flows (direction is explicitly specified as descending) and only first 10 records are printed.
.nf
\&  \fB$ mpiexec -n 3 fdistdump -a srcip,proto -o flows#desc -l 10 --fields=first,bytes,packets,flows flow_dir/*\fR
\&  first                       bytes       packets        flows       srcip               proto
\&  2015-01-19 22:59:21.976     233.8 M     5.7 M       5.7 M       42.9.199.188        TCP  
\&  2015-01-19 22:59:22.836     66.3 M      1.6 M       1.6 M       108.131.134.164     TCP  
\&  2015-01-19 22:58:26.705     364.5 M     3.5 M       1.3 M       192.245.161.141     TCP  
\&  2015-01-19 22:58:28.770     224.1 M     3.0 M       1.2 M       192.245.161.140     TCP  
\&  2015-01-19 22:59:21.542     44.3 M      1.1 M       1.1 M       44.49.159.132       TCP  
\&  2015-01-19 22:59:21.405     78.6 M      1.1 M       1.1 M       172.21.3.102        UDP  
\&  2015-01-19 22:59:21.592     73.7 M      953.1 k     953.1 k     192.245.180.181     UDP  
\&  2015-01-19 22:59:21.391     34.9 M      872.8 k     866.5 k     44.49.159.133       TCP  
\&  2015-01-19 22:58:34.898     58.0 M      1.0 M       839.0 k     44.49.159.135       TCP  
\&  2015-01-19 22:58:53.195     454.4 M     3.2 M       804.2 k     192.245.229.227     TCP  

\&  processed records summary:
\&          152.1 M flows, 1.9 G packets, 1.5 T bytes
\&          3.273358 seconds, 46.5 M flows/second
.fi

Following query will produce same results as the previous one, because
.B -s
switch is only a shortcut.
.nf
\&  \fB$ mpiexec -n 3 fdistdump -s srcip,proto/flows#desc flow_dir/*\fR
\&  <output omitted>
.fi

Statistic with filter is very popular query type.
.nf
\&  \fB$ mpiexec --hostfile hf.txt fdistdump -s srcip -f "srcport 53 and proto UDP" flow_dir/*\fR
\&  <output omitted>
.fi

.\" Time based options subsection ---------------------
.SS Time Based Options
Only flow files corresponding to specified time or time range will be processed.
However, \fIpath\fR directories have to contain specific directory hierarchy.

This query will process only a single flow file on each slave, the one which includes flows received at 10:02 on 2015-01-19.
The time specification is in the local time of the Czech Republic and it's during daylight saving time (CEST time zone, UTC+2), however record timestamps are in the UTC as you can see on \fBfirst\fR values.
.nf
\&  \fB$ mpiexec --hostfile hf.txt fdistdump -t "2015-01-19 10:02" profile_dir/\fR
\&  first                       bytes      packets     srcport     dstport     srcip              dstip            proto
\&  2015-01-19 08:00:00.186     27.1 k     29       28974       1115        172.173.129.10     99.28.15.205     TCP
\&  2015-01-19 08:00:01.010     346        2        51413       23705       20.107.222.24      172.173.14.68    UDP
\&  2015-01-19 08:00:01.058     54.3 k     58       14627       1115        172.173.129.10     99.28.15.205     TCP
\&  <output omitted>

\&  processed records summary:
\&          129.0 k flows, 3.2 M packets, 3.3 G bytes
\&          0.037444 seconds, 3.4 M flows/second
.fi

Following time range is from 2015-01-19 10:00 to 12:00 in local time of the Czech Republic.
Aggregation key is \fBbytes\fR field, records with the same bytes value are merged together.
.nf
\&  \fB$ mpiexec --hostfile hf.txt fdistdump -l 3 -s bytes -T "2015-01-19 10:00#2015-01-19 12:00" profile_dir/\fR
\&  first                       last                        bytes     packets       flows      duration         bps     pps       bpp
\&  2015-01-20 08:58:54.770     2015-01-20 10:59:50.970     92        58.3 M     57.8 M     02:00:56.200     0.1     8.0 k     0.0
\&  2015-01-20 08:58:48.334     2015-01-20 10:59:50.829     184       57.8 M     28.9 M     02:01:02.495     0.2     8.0 k     0.0
\&  2015-01-20 08:59:23.615     2015-01-20 10:59:50.989     40        24.3 M     24.3 M     02:00:27.374     0.0     3.4 k     0.0

\&  processed records summary:
\&          262.9 M flows, 1.8 G packets, 1.1 T bytes
\&          1.419171 seconds, 185.3 M flows/second
.fi

Following time range will process files from last Monday midnight until now.
.nf
\&  \fB$ mpiexec --hostfile hf.txt fdistdump -T monday profile_dir/\fR
\&  <output omitted>
.fi

Time specifiers are in the local time by default, but conversion to UTC is performed internally.
That may cause some problems.
In the following example, no files were processed, because specified time range is from the beginning of the daylight saving time in the Czech Republic.
Time is shifted from 02:00 to 03:00, therefore duration of this time range is zero.
.nf
\&  \fB$ mpiexec --hostfile hf.txt fdistdump -s srcport --fields=duration \\
\&    -T "2015-03-29 02:00#2015-03-29 03:00" profile_dir/\fR
\&  first                       last                        flows       srcport     duration

\&  processed records summary:
\&          0 flows, 0 packets, 0 bytes
\&          0.011489 seconds, 0.0 flows/second
.fi

This can be solved by an \fBUTC\fR flag, which says that your time specifier is already in UTC.
.nf
\&  \fB$ mpiexec --hostfile hf.txt fdistdump -s srcport --fields=duration \\
\&    -T "2015-03-29 01:00 UTC#2015-03-29 02:00 UTC" profile_dir/\fR
\&  first                       last                        flows       srcport     duration
\&  2015-01-20 00:59:11.186     2015-01-20 01:59:49.446     3.9 M       9200        01:00:38.260
\&  2015-01-20 00:55:05.673     2015-01-20 01:59:47.905     3.1 M       3389        01:04:42.232
\&  2015-01-20 00:57:37.130     2015-01-20 02:00:01.362     2.6 M       53          01:02:24.232
\&  <output omitted>

\&  processed records summary:
\&          68.6 M flows, 617.9 M packets, 476.6 G bytes
\&          0.610311 seconds, 112.4 M flows/second
.fi

.\" Miscellaneous subsection ---------------------
.SS Miscellaneous
Usage of CSV output format.
.nf
\&  \fB$ mpiexec -n 2 fdistdump -o first --output-format=csv flow_file\fR
\&  first,bytes,packets,srcport,dstport,srcip,dstip,proto
\&  1421708354242,180,3,41657,23,0:0:0:1896806481,0:0:0:2887049676,6
\&  1421708357387,841,5,57942,80,0:0:0:3237307950,0:0:0:919755252,6
\&  <output omitted>
.fi

TCP flags field with default conversion to human readable string.
.nf
\&  \fB$ mpiexec -n 2 fdistdump -s srcport,dstport --fields=tcpflags --filter="proto TCP" flow_file\fR
\&  flows       srcport     dstport     tcpflags
\&  20.3 M      6000        9064        .....RS.
\&  13.5 M      6000        22          ...APRSF
\&  6.8 M       6000        1433        ...APRSF
\&  <output omitted>

\&  processed records summary:
\&          1.5 G flows, 18.5 G packets, 14.7 T bytes
\&          92.378761 seconds, 16.1 M flows/second
.fi

TCP flags and volumetric fields without conversion.
.nf
\&  \fB$ mpiexec -n 2 fdistdump -s srcport,dstport --fields=tcpflags --filter="proto TCP" \\
\&    --output-tcpflags-conv=none --output-volume-conv=none flow_file\fR
\&  flows        srcport     dstport     tcpflags
\&  20339177     6000        9064        6
\&  13469252     6000        22          31
\&  6822069      6000        1433        31
\&  <output omitted>
\&  summary: 1490407622 flows, 18488114618 packets, 14734410728124 bytes
\&           89.289585 seconds, 16691841.7 flows/second
.fi

Read only each file's metadata, sum it up and print in human readable format.
.nf
\&  \fB$ mpiexec -n 2 fdistdump --output-items=metadata-summary profile_dir/\fR
\&  metadata summary:
\&          flows:
\&                  total: 1.9 M
\&                  TCP:   970.5 k
\&                  UDP:   904.2 k
\&                  ICMP:  25.6 k
\&                  other: 800
\&          packets:
\&                  total: 123.6 M
\&                  TCP:   121.0 M
\&                  UDP:   2.5 M
\&                  ICMP:  52.8 k
\&                  other: 2.8 k
\&          bytes:
\&                  total: 169.1 G
\&                  TCP:   167.5 G
\&                  UDP:   1.6 G
\&                  ICMP:  6.2 M
\&                  other: 360.0 k
.fi

Read only each file's metadata, sum it up and print in the CSV format.
.nf
\&  \fB$ mpiexec -n 2 fdistdump --output-items=metadata-summary --output-format=csv profile_dir/\fR
\&  field,total,TCP,UDP,ICMP,other
\&  flows,1901100,970500,904200,25600,800
\&  packets,123566800,121011000,2500200,52800,2800
\&  bytes,169099997700,167450161300,1643290400,6186000,360000
.fi


.\" SEE ALSO section -----------------------------------------------------------
.SH SEE ALSO
.BR inet_ntop (3)
.BR mpiexec (1),
.BR mpirun (1),
.BR nfdump (1),
.BR mpi (3)
.BR tzset (3)
.BR tzselect (3)
